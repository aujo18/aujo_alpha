---
// Accepter siteUrl en tant que propriété
const { siteUrl } = Astro.props;
const products = [
  {
    id: "ep-aujo",
    name: "EP Aujo",
    price: 20.00,
    description: "",
    image: "https://res.cloudinary.com/dxyvj8rka/image/upload/f_auto,q_auto/v1/Aujo/a7ith5ihfedughm7txyc"
  },
  {
    id: "aujo-cewneck",
    name: "Aujo Crewneck",
    price: 80.00,
    description: "",
    size: true, // Indicateur que ce produit a besoin d'un sélecteur de taille
    sizeOptions: "S|M|L|XL", // Options de taille séparées par des pipes
    image: "https://res.cloudinary.com/dxyvj8rka/image/upload/f_auto,q_auto/v1/Aujo/xowv99beywgte8ktoums"
  }
];

// Configuration de base
const baseUrl = import.meta.env.PROD 
  ? "https://www.aujo.ca/boutique" 
  : "http://localhost:3000/boutique";
---

<!-- Style spécifique à la boutique -->
<style>
  .product-grid {
    display: grid;
    grid-template-columns: 1fr; /* Une seule colonne par défaut (mobile) */
    gap: 2.5rem;
    justify-content: center;
  }
  
  /* Tablette : 2 colonnes */
  @media (min-width: 640px) {
    .product-grid {
      grid-template-columns: repeat(auto-fit, minmax(280px, 300px));
      justify-content: center;
    }
  }
  
  /* Desktop : exactement 3 colonnes maximum */
  @media (min-width: 1024px) {
    .product-grid {
      grid-template-columns: repeat(auto-fit, minmax(280px, 300px));
      max-width: 1200px;
      margin: 0 auto;
      justify-content: center;
    }
  }
  
  .product-card {
    display: flex;
    flex-direction: column;
    background-color: #ffffff;
    transition: transform 0.3s ease;
  }
  
  .product-card:hover {
    transform: translateY(-5px);
  }
  
  .product-image-container {
    position: relative;
    cursor: pointer;
    overflow: hidden;
  }
  
  .product-image {
    aspect-ratio: 1 / 1;
    width: 100%;
    object-fit: cover;
    margin-bottom: 1rem;
    transition: transform 0.3s ease;
  }
  
  .product-image-container:hover .product-image {
    transform: scale(1.05);
  }
  
  .product-image-zoom {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .product-image-container:hover .product-image-zoom {
    opacity: 1;
  }
  
  .product-name {
    font-size: 1.2rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
  }
  
  .product-description {
    font-size: 0.9rem;
    color: #6b7280;
    margin-bottom: 1rem;
  }
  
  .product-price {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
  }
  
  .add-to-cart {
    background-color: #295135; /* Vert du design original */
    color: white;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.25rem;
    font-size: 0.9rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
    width: 100%;
  }
  
  .add-to-cart:hover {
    background-color: #1e3b27; /* Vert plus foncé */
  }
  
  .price-cart-row {
    display: flex;
    flex-direction: column;
    margin-top: auto;
  }
  
  /* Styles pour le modal d'image */
  .image-modal {
    display: none;
    position: fixed;
    z-index: 10000000;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    align-items: center;
    justify-content: center;
    cursor: zoom-out;
  }
  
  .image-modal.open {
    display: flex;
  }
  
  .modal-content {
    max-width: 90%;
    max-height: 90%;
    object-fit: contain;
  }
  
  .modal-close {
    position: absolute;
    top: 15px;
    right: 15px;
    color: white;
    font-size: 30px;
    font-weight: bold;
    cursor: pointer;
  }
</style>

<div class="product-grid">
  {products.map((product) => (
    <div class="product-card">
      <div class="product-image-container" data-image={product.image} data-product-name={product.name}>
        <img 
          src={product.image} 
          alt={product.name} 
          class="product-image"
          onerror="this.src='/images/placeholder.jpg'; this.onerror=null;"
        />
        <div class="product-image-zoom">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"/>
            <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2z"/>
          </svg>
        </div>
      </div>
      <div class="product-content">
        <h3 class="product-name">{product.name}</h3>
        <p class="product-description">{product.description}</p>
        <div class="price-cart-row">
          <span class="product-price">{product.price.toFixed(2)} $</span>
          <button
            class="snipcart-add-item add-to-cart"
            data-item-id={product.id}
            data-item-name={product.name}
            data-item-price={product.price}
            data-item-url={siteUrl}
            data-item-image={product.image}
            
            {...product.size && {
              'data-item-custom1-name': 'Taille',
              'data-item-custom1-options': product.sizeOptions,
              'data-item-custom1-required': 'true'
            }}
          >
            Ajouter au panier
          </button>
        </div>
      </div>
    </div>
  ))}
</div>

<!-- Modal pour l'agrandissement des images -->
<div class="image-modal" id="imageModal">
  <span class="modal-close">&times;</span>
  <img src="" class="modal-content" id="modalImage" />
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage');
    const closeButton = document.querySelector('.modal-close');
    
    // Ouvrir le modal quand on clique sur une image
    document.querySelectorAll('.product-image-container').forEach(container => {
      container.addEventListener('click', function() {
        const imgSrc = this.getAttribute('data-image');
        const productName = this.getAttribute('data-product-name');
        
        modalImg.src = imgSrc;
        modalImg.alt = productName;
        modal.classList.add('open');
        
        // Empêcher le défilement du body quand le modal est ouvert
        document.body.style.overflow = 'hidden';
      });
    });
    
    // Fermer le modal quand on clique sur le bouton de fermeture
    closeButton.addEventListener('click', () => {
      modal.classList.remove('open');
      document.body.style.overflow = '';
    });
    
    // Fermer le modal quand on clique n'importe où dans le modal
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.remove('open');
        document.body.style.overflow = '';
      }
    });
    
    // Fermer le modal avec la touche Echap
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal.classList.contains('open')) {
        modal.classList.remove('open');
        document.body.style.overflow = '';
      }
    });
  });
</script> 