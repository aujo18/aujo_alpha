---
import { translations } from '../i18n/index.js';

const { locale = 'en' } = Astro.props;
const t = translations[locale as keyof typeof translations];
---

<section id={locale === 'en' ? 'home' : 'accueil'} class="min-h-screen flex items-center justify-center relative overflow-hidden">
  <div class="absolute inset-0 bg-gradient-to-b from-transparent to-white z-10"></div>
  
  <!-- Slider container -->
  <div class="slider-container absolute inset-0">
    <!-- Images du slider -->
    <div class="slider-image absolute inset-0 w-full h-full opacity-100 transition-opacity duration-1500 ease-in-out">
      <img 
        src="https://res.cloudinary.com/dxyvj8rka/image/upload/v1739971664/Aujo/vfbmv044jb9dgukbc8pm.jpg?q=80&w=2070"
        alt="Artiste en performance"
        class="w-full h-full object-cover opacity-80"
      />
    </div>
    <div class="slider-image absolute inset-0 w-full h-full opacity-0 transition-opacity duration-1500 ease-in-out">
      <img 
        src="https://res.cloudinary.com/dxyvj8rka/image/upload/v1741020578/Aujo/cgysbu9ue4yxat96uv5s.jpg"
        alt="Aujo"
        class="w-full h-full object-cover opacity-80"
      />
    </div>
  </div>
  
  <div class="relative z-20 text-center px-4">
    <img 
      src="https://res.cloudinary.com/dxyvj8rka/image/upload/v1739975100/Aujo/fj5mfdz7gi0lb3rn3wy6.png?q=180&w=600"
      alt="Aujo - Auteure • Compositrice • Interprète"
      class="inline-block w-full max-w-lg md:max-w-2xl mb-8"
    />
    <p class="text-xl md:text-2xl text-neutral-600 font-archivo">{t.hero.subtitle}</p>
    
    <!-- Navigation du slider -->
    <div class="slider-nav flex justify-center items-center space-x-4 mt-6">
      <button id="prev-slide" class="slider-nav-btn p-2 text-neutral-600 hover:text-primary-600 transition-colors duration-300 focus:outline-none">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        <span class="sr-only">Image précédente</span>
      </button>
      <button id="next-slide" class="slider-nav-btn p-2 text-neutral-600 hover:text-primary-600 transition-colors duration-300 focus:outline-none">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
        <span class="sr-only">Image suivante</span>
      </button>
    </div>
  </div>
</section>

<script>
  // Script pour alterner les images
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.slider-image');
    const prevBtn = document.getElementById('prev-slide');
    const nextBtn = document.getElementById('next-slide');
    let currentIndex = 0;
    let intervalId: number | undefined;
    
    // Fonction pour afficher une image spécifique
    function showImage(index: number) {
      // Masquer toutes les images
      images.forEach(image => {
        image.classList.remove('opacity-100');
        image.classList.add('opacity-0');
      });
      
      // Afficher l'image demandée
      images[index].classList.remove('opacity-0');
      images[index].classList.add('opacity-100');
      
      // Mettre à jour l'index courant
      currentIndex = index;
    }
    
    // Fonction pour passer à l'image suivante
    function nextImage() {
      const newIndex = (currentIndex + 1) % images.length;
      showImage(newIndex);
    }
    
    // Fonction pour passer à l'image précédente
    function prevImage() {
      const newIndex = (currentIndex - 1 + images.length) % images.length;
      showImage(newIndex);
    }
    
    // Fonction pour redémarrer l'intervalle
    function resetInterval() {
      clearInterval(intervalId);
      intervalId = setInterval(nextImage, 10000);
    }
    
    // Ajouter les écouteurs d'événements aux boutons
    nextBtn?.addEventListener('click', () => {
      nextImage();
      resetInterval();
    });
    
    prevBtn?.addEventListener('click', () => {
      prevImage();
      resetInterval();
    });
    
    // Démarrer immédiatement la première transition
    setTimeout(() => {
      nextImage();
      // Puis continuer avec l'intervalle normal
      intervalId = setInterval(nextImage, 10000);
    }, 1000); // Attendre 1 seconde après le chargement pour la première transition
  });
</script>

<style>
  /* Assurer que les transitions sont fluides */
  .slider-image {
    transition: opacity 1.5s ease-in-out;
  }
  
  /* Style pour les boutons de navigation */
  .slider-nav-btn {
    background-color: rgba(255, 255, 255, 0.5);
    border-radius: 50%;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }
  
  .slider-nav-btn:hover {
    background-color: rgba(255, 255, 255, 0.7);
  }
</style>